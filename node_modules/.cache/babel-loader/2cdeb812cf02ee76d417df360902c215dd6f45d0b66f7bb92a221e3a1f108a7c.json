{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useCartData.js\n\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nconst useCartData = isOpen => {\n  _s();\n  const [orderedItems, setOrderedItems] = useState([]); // Store the ordered items\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchOrderData = async () => {\n      try {\n        var _response$data, _response$data2;\n        const token = localStorage.getItem(\"token\");\n        if (!token) {\n          throw new Error(\"User is not logged in.\");\n        }\n        const response = await axios.get(\"https://ram.freelogomaker.in/api/order\", {\n          // Use the API that gives you ordered items\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        const orderData = ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.orders) || [];\n        const orderProducts = ((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.orderProducts) || []; // Assume this contains the ordered products\n\n        // Merge order items with their products\n        const mergedOrderItems = orderData.map(orderItem => {\n          const product = orderProducts.find(product => product.id === orderItem.product_id);\n          return product ? {\n            ...orderItem,\n            ...product\n          } : null;\n        }).filter(Boolean); // Remove null values if no matching product is found\n\n        setOrderedItems(mergedOrderItems);\n        setLoading(false);\n      } catch (error) {\n        setError(error.message);\n        setLoading(false);\n      }\n    };\n    if (isOpen) {\n      fetchOrderData();\n    }\n  }, [isOpen]);\n  return {\n    orderedItems,\n    loading,\n    error\n  };\n};\n_s(useCartData, \"kJ0LSq1qyQN5/T+0+6hA73Axkf8=\");\nexport default useCartData;","map":{"version":3,"names":["useState","useEffect","axios","useCartData","isOpen","_s","orderedItems","setOrderedItems","loading","setLoading","error","setError","fetchOrderData","_response$data","_response$data2","token","localStorage","getItem","Error","response","get","headers","Authorization","orderData","data","orders","orderProducts","mergedOrderItems","map","orderItem","product","find","id","product_id","filter","Boolean","message"],"sources":["C:/Users/Ram/Desktop/React/Projects/React_shoping_cart/src/Shoping_cart/Cart/Order.js"],"sourcesContent":["// src/hooks/useCartData.js\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst useCartData = (isOpen) => {\r\n  const [orderedItems, setOrderedItems] = useState([]);  // Store the ordered items\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchOrderData = async () => {\r\n      try {\r\n        const token = localStorage.getItem(\"token\");\r\n\r\n        if (!token) {\r\n          throw new Error(\"User is not logged in.\");\r\n        }\r\n\r\n        const response = await axios.get(\"https://ram.freelogomaker.in/api/order\", { // Use the API that gives you ordered items\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n\r\n        const orderData = response.data?.orders || [];\r\n        const orderProducts = response.data?.orderProducts || []; // Assume this contains the ordered products\r\n\r\n        // Merge order items with their products\r\n        const mergedOrderItems = orderData.map((orderItem) => {\r\n          const product = orderProducts.find((product) => product.id === orderItem.product_id);\r\n          return product ? { ...orderItem, ...product } : null;\r\n        }).filter(Boolean);  // Remove null values if no matching product is found\r\n\r\n        setOrderedItems(mergedOrderItems);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        setError(error.message);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    if (isOpen) {\r\n      fetchOrderData();\r\n    }\r\n  }, [isOpen]);\r\n\r\n  return { orderedItems, loading, error };\r\n};\r\n\r\nexport default useCartData;\r\n"],"mappings":";AAAA;;AAEA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,WAAW,GAAIC,MAAM,IAAK;EAAAC,EAAA;EAC9B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;EACvD,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMW,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QAAA,IAAAC,cAAA,EAAAC,eAAA;QACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;QAE3C,IAAI,CAACF,KAAK,EAAE;UACV,MAAM,IAAIG,KAAK,CAAC,wBAAwB,CAAC;QAC3C;QAEA,MAAMC,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,GAAG,CAAC,wCAAwC,EAAE;UAAE;UAC3EC,OAAO,EAAE;YACPC,aAAa,EAAE,UAAUP,KAAK;UAChC;QACF,CAAC,CAAC;QAEF,MAAMQ,SAAS,GAAG,EAAAV,cAAA,GAAAM,QAAQ,CAACK,IAAI,cAAAX,cAAA,uBAAbA,cAAA,CAAeY,MAAM,KAAI,EAAE;QAC7C,MAAMC,aAAa,GAAG,EAAAZ,eAAA,GAAAK,QAAQ,CAACK,IAAI,cAAAV,eAAA,uBAAbA,eAAA,CAAeY,aAAa,KAAI,EAAE,CAAC,CAAC;;QAE1D;QACA,MAAMC,gBAAgB,GAAGJ,SAAS,CAACK,GAAG,CAAEC,SAAS,IAAK;UACpD,MAAMC,OAAO,GAAGJ,aAAa,CAACK,IAAI,CAAED,OAAO,IAAKA,OAAO,CAACE,EAAE,KAAKH,SAAS,CAACI,UAAU,CAAC;UACpF,OAAOH,OAAO,GAAG;YAAE,GAAGD,SAAS;YAAE,GAAGC;UAAQ,CAAC,GAAG,IAAI;QACtD,CAAC,CAAC,CAACI,MAAM,CAACC,OAAO,CAAC,CAAC,CAAE;;QAErB5B,eAAe,CAACoB,gBAAgB,CAAC;QACjClB,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,QAAQ,CAACD,KAAK,CAAC0B,OAAO,CAAC;QACvB3B,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAED,IAAIL,MAAM,EAAE;MACVQ,cAAc,CAAC,CAAC;IAClB;EACF,CAAC,EAAE,CAACR,MAAM,CAAC,CAAC;EAEZ,OAAO;IAAEE,YAAY;IAAEE,OAAO;IAAEE;EAAM,CAAC;AACzC,CAAC;AAACL,EAAA,CA3CIF,WAAW;AA6CjB,eAAeA,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}